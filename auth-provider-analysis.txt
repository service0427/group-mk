# AuthProvider 홀딩 문제 및 강제 로그아웃 시 Supabase 연동 문제 분석

## 1. AuthProvider 홀딩 문제 원인 분석

### 1.1 초기 로드 시 홀딩 원인
- **문제**: 컴포넌트 마운트 시 인증 상태 확인 과정에서 지연 발생
- **원인**:
  1. `initAuth` 함수에서 setTimeout(0)으로 백그라운드 처리를 하면서 비동기 작업이 중첩됨
  2. 토큰 갱신과 사용자 정보 조회가 순차적으로 진행되어 시간이 오래 걸림
  3. loading 상태가 false로 변경되기 전까지 화면이 홀딩됨

### 1.2 토큰 갱신 주기 문제
- **문제**: 주기적인 토큰 유효성 검사가 메인 스레드를 차단
- **원인**:
  1. 토큰 만료 시간 계산 로직이 복잡하고 반복적으로 실행됨
  2. checkTokenValidity 함수가 동기적으로 여러 작업을 수행
  3. 5분마다 실행되는 인터벌이 누적되어 성능 저하

### 1.3 Supabase 인증 상태 변경 리스너 문제
- **문제**: onAuthStateChange 콜백에서 무한 루프나 상태 충돌 발생
- **원인**:
  1. 인증 상태 변경 시 매번 getUser() 호출로 추가 API 요청 발생
  2. 여러 탭에서 동시에 인증 상태가 변경될 때 충돌
  3. authInitialized 플래그 관리가 제대로 되지 않음

## 2. 강제 로그아웃 시 Supabase 연동 문제

### 2.1 로그아웃 프로세스 순서 문제
- **문제**: 로그아웃 후 로그인 페이지에서 Supabase API 호출이 실패
- **원인**:
  ```javascript
  // 현재 코드의 문제점
  1. setAuth(undefined) - 인증 정보 제거
  2. supabase.auth.signOut() - 비동기로 실행되지만 결과를 기다리지 않음
  3. localStorage/sessionStorage 정리 - Supabase 세션 정보까지 삭제
  4. 페이지 이동 - 아직 signOut이 완료되지 않은 상태
  ```

### 2.2 스토리지 정리 시점 문제
- **문제**: Supabase 세션 정보가 너무 일찍 삭제됨
- **원인**:
  1. localStorage에서 'sb-' 접두사로 시작하는 모든 항목을 즉시 삭제
  2. Supabase 클라이언트가 필요한 세션 정보가 사라져 API 호출 실패
  3. 새로운 로그인 시도 시 Supabase 초기화 실패

### 2.3 세션 복구 메커니즘 문제
- **문제**: 강제 로그아웃 후 세션 복구가 제대로 되지 않음
- **원인**:
  1. refreshToken 함수가 이미 삭제된 토큰으로 갱신 시도
  2. getSession() 호출 시 스토리지에 세션 정보가 없어 실패
  3. 에러 처리가 제대로 되지 않아 무한 대기 상태

## 3. 해결 방안

### 3.1 초기 로드 최적화
```javascript
// 개선안: 병렬 처리와 캐싱 활용
const initAuth = async () => {
  const storeAuth = authHelper.getAuth();
  if (!storeAuth) {
    setLoading(false);
    return;
  }
  
  // 캐시된 사용자 정보로 즉시 UI 표시
  const cachedUser = sessionStorage.getItem('currentUser');
  if (cachedUser) {
    setCurrentUser(JSON.parse(cachedUser));
    setLoading(false); // 즉시 로딩 해제
  }
  
  // 백그라운드에서 최신 정보 업데이트
  Promise.all([
    refreshToken(),
    getUser()
  ]).then(([tokenValid, user]) => {
    if (tokenValid && user) {
      setCurrentUser(user);
      setAuthVerified(true);
    }
  });
};
```

### 3.2 로그아웃 프로세스 개선
```javascript
const logout = async () => {
  try {
    // 1. 먼저 Supabase 로그아웃 완료 대기
    await supabase.auth.signOut();
    
    // 2. 그 다음 로컬 상태 정리
    setAuth(undefined);
    setCurrentUser(null);
    authHelper.removeAuth();
    
    // 3. 마지막으로 스토리지 정리 (Supabase 항목 제외)
    const keysToRemove = ['auth', 'currentUser', 'lastAuthCheck'];
    keysToRemove.forEach(key => {
      localStorage.removeItem(key);
      sessionStorage.removeItem(key);
    });
    
    // 4. 페이지 이동
    window.location.href = '/auth/login';
  } catch (error) {
    // 에러 처리
  }
};
```

### 3.3 토큰 갱신 최적화
```javascript
// 개선안: 토큰 만료 전 자동 갱신
useEffect(() => {
  if (!auth) return;
  
  const scheduleTokenRefresh = () => {
    const decoded = decodeToken(auth.access_token);
    if (!decoded?.exp) return;
    
    const expiryTime = decoded.exp * 1000;
    const refreshTime = expiryTime - (5 * 60 * 1000); // 만료 5분 전
    const delay = Math.max(0, refreshTime - Date.now());
    
    return setTimeout(() => {
      refreshToken().then(success => {
        if (success) scheduleTokenRefresh(); // 다시 스케줄링
      });
    }, delay);
  };
  
  const timerId = scheduleTokenRefresh();
  return () => clearTimeout(timerId);
}, [auth]);
```

## 4. 구체적인 해결 방법

### 4.1 AuthProvider 홀딩 문제 해결

#### 4.1.1 초기 로드 속도 개선
```javascript
// 현재 문제가 있는 코드를 다음과 같이 수정
useEffect(() => {
  const initAuth = async () => {
    try {
      const storeAuth = authHelper.getAuth();
      
      if (!storeAuth) {
        setLoading(false);
        setAuthInitialized(true);
        return;
      }

      setAuth(storeAuth);
      
      // 1단계: 캐시된 데이터로 즉시 UI 표시
      const cachedUser = sessionStorage.getItem('currentUser');
      if (cachedUser) {
        try {
          const parsedUser = JSON.parse(cachedUser);
          setCurrentUser(parsedUser);
          setLoading(false); // 즉시 로딩 해제하여 홀딩 방지
        } catch (e) {
          console.error('캐시 파싱 실패:', e);
        }
      } else {
        setLoading(false); // 캐시가 없어도 로딩 해제
      }

      // 2단계: 백그라운드에서 데이터 갱신 (UI 블로킹 없음)
      const updateAuthData = async () => {
        try {
          const [isTokenValid, userData] = await Promise.all([
            refreshToken(),
            getUser()
          ]);

          if (isTokenValid && userData) {
            setCurrentUser(userData);
            setAuthVerified(true);
            sessionStorage.setItem('currentUser', JSON.stringify(userData));
            sessionStorage.setItem('lastAuthCheck', Date.now().toString());
          } else if (!isTokenValid) {
            // 토큰이 유효하지 않으면 로그아웃 처리
            handleInvalidAuth();
          }
        } catch (error) {
          console.error('인증 데이터 업데이트 실패:', error);
        }
      };

      // setTimeout을 requestIdleCallback으로 변경하여 성능 개선
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => updateAuthData());
      } else {
        setTimeout(updateAuthData, 0);
      }

    } catch (error) {
      console.error('초기화 오류:', error);
      setLoading(false);
    } finally {
      setAuthInitialized(true);
    }
  };

  initAuth();
}, []);
```

#### 4.1.2 토큰 갱신 로직 개선
```javascript
// 스마트한 토큰 갱신 스케줄러
const useTokenRefreshScheduler = (auth: AuthModel | undefined) => {
  useEffect(() => {
    if (!auth?.access_token) return;

    let refreshTimer: NodeJS.Timeout;
    let isRefreshing = false;

    const scheduleNextRefresh = () => {
      try {
        const decoded = decodeToken(auth.access_token);
        if (!decoded?.exp) return;

        const now = Date.now();
        const expiryTime = decoded.exp * 1000;
        const timeUntilExpiry = expiryTime - now;

        // 이미 만료된 경우 즉시 갱신
        if (timeUntilExpiry <= 0) {
          performRefresh();
          return;
        }

        // 만료 5분 전에 갱신 (최소 30초)
        const refreshIn = Math.max(30000, timeUntilExpiry - 300000);

        refreshTimer = setTimeout(() => {
          performRefresh();
        }, refreshIn);
      } catch (error) {
        console.error('토큰 디코딩 실패:', error);
      }
    };

    const performRefresh = async () => {
      if (isRefreshing) return;
      
      isRefreshing = true;
      try {
        const success = await refreshToken();
        if (success) {
          scheduleNextRefresh();
        } else {
          // 갱신 실패 시 로그아웃
          await logout();
        }
      } catch (error) {
        console.error('토큰 갱신 실패:', error);
      } finally {
        isRefreshing = false;
      }
    };

    scheduleNextRefresh();

    return () => {
      if (refreshTimer) clearTimeout(refreshTimer);
    };
  }, [auth?.access_token]);
};
```

### 4.2 강제 로그아웃 시 Supabase 연동 문제 해결

#### 4.2.1 안전한 로그아웃 프로세스
```javascript
const logout = useCallback(async () => {
  try {
    // 로그아웃 진행 중 플래그 설정
    setIsLoggingOut(true);
    
    // 1단계: 로컬 상태만 먼저 초기화 (UI 즉시 반영)
    setAuth(undefined);
    setCurrentUser(null);
    setAuthVerified(false);
    
    // 2단계: Supabase 로그아웃 (네트워크 요청)
    try {
      await supabase.auth.signOut();
    } catch (signOutError) {
      console.error('Supabase 로그아웃 실패:', signOutError);
      // 실패해도 계속 진행
    }
    
    // 3단계: 로컬 스토리지 정리 (Supabase 세션은 유지)
    const cleanupStorage = () => {
      // 우리 앱의 데이터만 삭제
      const appKeys = ['auth', 'currentUser', 'lastAuthCheck'];
      appKeys.forEach(key => {
        try {
          localStorage.removeItem(key);
          sessionStorage.removeItem(key);
        } catch (e) {
          console.error(`${key} 삭제 실패:`, e);
        }
      });
      
      // Supabase 세션 정보는 삭제하지 않음
      // 이렇게 하면 다음 로그인 시 문제 없음
    };
    
    cleanupStorage();
    authHelper.removeAuth();
    
    // 4단계: 페이지 리다이렉트
    // window.location.href 대신 React Router 사용
    const timestamp = new Date().getTime();
    window.location.replace(`/auth/login?t=${timestamp}`);
    
  } catch (error) {
    console.error('로그아웃 오류:', error);
    
    // 오류 발생 시에도 최소한의 정리 수행
    setAuth(undefined);
    setCurrentUser(null);
    authHelper.removeAuth();
    
    // 강제 리다이렉트
    window.location.replace('/auth/login');
  } finally {
    // 로그아웃 완료 후 플래그 해제
    setTimeout(() => {
      setIsLoggingOut(false);
    }, 500);
  }
}, [setIsLoggingOut]);
```

#### 4.2.2 Supabase 세션 복구 메커니즘
```javascript
// Supabase 클라이언트 재초기화 함수
const reinitializeSupabase = async () => {
  try {
    // 기존 세션 확인
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('세션 확인 실패:', error);
      
      // 세션 복구 시도
      const storedSession = localStorage.getItem('sb-session');
      if (storedSession) {
        try {
          const parsedSession = JSON.parse(storedSession);
          await supabase.auth.setSession({
            access_token: parsedSession.access_token,
            refresh_token: parsedSession.refresh_token
          });
        } catch (e) {
          console.error('세션 복구 실패:', e);
        }
      }
    }
    
    return session;
  } catch (error) {
    console.error('Supabase 재초기화 실패:', error);
    return null;
  }
};

// 로그인 페이지에서 사용
useEffect(() => {
  const checkAndRestoreSession = async () => {
    const session = await reinitializeSupabase();
    if (session) {
      // 유효한 세션이 있으면 대시보드로 리다이렉트
      navigate('/dashboard');
    }
  };
  
  checkAndRestoreSession();
}, []);
```

### 4.3 추가 개선 사항

#### 4.3.1 디바운싱과 쓰로틀링 적용
```javascript
// 유틸리티 함수
const debounce = (func: Function, delay: number) => {
  let timeoutId: NodeJS.Timeout;
  return (...args: any[]) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
};

const throttle = (func: Function, limit: number) => {
  let inThrottle: boolean;
  return (...args: any[]) => {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
};

// 사용 예시
const debouncedCheckAuth = debounce(checkTokenValidity, 1000);
const throttledActivityHandler = throttle(resetInactivityTimer, 5000);
```

#### 4.3.2 에러 바운더리 추가
```javascript
// AuthErrorBoundary.tsx
class AuthErrorBoundary extends React.Component {
  state = { hasError: false };
  
  static getDerivedStateFromError(error: Error) {
    return { hasError: true };
  }
  
  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Auth Error:', error, errorInfo);
    
    // 인증 관련 에러 시 로그인 페이지로 리다이렉트
    if (error.message.includes('auth') || error.message.includes('token')) {
      localStorage.clear();
      sessionStorage.clear();
      window.location.href = '/auth/login';
    }
  }
  
  render() {
    if (this.state.hasError) {
      return <div>인증 오류가 발생했습니다. 다시 로그인해주세요.</div>;
    }
    
    return this.props.children;
  }
}

// App.tsx에서 사용
<AuthErrorBoundary>
  <AuthProvider>
    <App />
  </AuthProvider>
</AuthErrorBoundary>
```

#### 4.3.3 성능 모니터링 추가
```javascript
// 성능 측정 유틸리티
const measurePerformance = (name: string, fn: Function) => {
  return async (...args: any[]) => {
    const start = performance.now();
    try {
      const result = await fn(...args);
      const end = performance.now();
      console.log(`[Performance] ${name}: ${(end - start).toFixed(2)}ms`);
      return result;
    } catch (error) {
      const end = performance.now();
      console.error(`[Performance] ${name} failed after ${(end - start).toFixed(2)}ms`);
      throw error;
    }
  };
};

// 사용 예시
const getUser = measurePerformance('getUser', async () => {
  // 기존 getUser 로직
});

const refreshToken = measurePerformance('refreshToken', async () => {
  // 기존 refreshToken 로직
});
```

## 5. 즉시 적용 가능한 Quick Fix

### 5.1 임시 해결책 (빠른 적용)
```javascript
// AuthProvider.tsx 상단에 추가
const ENABLE_AUTH_CACHE = true;
const AUTH_CACHE_DURATION = 10 * 60 * 1000; // 10분
const SKIP_INITIAL_VERIFY = true;

// initAuth 함수 수정
if (SKIP_INITIAL_VERIFY && cachedUser) {
  setCurrentUser(JSON.parse(cachedUser));
  setLoading(false);
  setAuthVerified(true);
  return; // 캐시가 있으면 검증 스킵
}
```

### 5.2 로그아웃 핫픽스
```javascript
// logout 함수를 다음으로 교체
const logout = async () => {
  // 간단한 버전 - 페이지 새로고침으로 모든 상태 초기화
  localStorage.clear();
  sessionStorage.clear();
  window.location.href = '/auth/login';
};
```

이러한 해결 방법들을 단계적으로 적용하면 AuthProvider의 홀딩 문제와 로그아웃 시 Supabase 연동 문제를 해결할 수 있을 거야.

## 6. 추가 발견된 홀딩 원인과 해결법 (2025.01.06 업데이트)

### 6.1 새로 발견된 홀딩 원인들

#### 6.1.1 Promise.all에서의 병렬 처리 문제
- **문제**: initAuth의 Promise.all에서 refreshToken과 getUser가 동시에 실행되면서 경쟁 조건 발생
- **증상**: 가끔씩 토큰 갱신과 사용자 정보 조회가 충돌하여 무한 대기
- **원인**:
  ```javascript
  const [isTokenValid, userData] = await Promise.all([
    refreshToken(),  // Supabase 세션 갱신
    getUser()        // Supabase 세션 조회
  ]);
  ```
  두 함수가 동시에 Supabase 세션에 접근하면서 충돌 가능성

#### 6.1.2 requestIdleCallback 폴백 타이밍 문제
- **문제**: setTimeout(updateAuthData, 0)이 실제로는 4ms 지연 발생
- **증상**: 초기 로드 시 미세한 홀딩이 여전히 발생
- **원인**: 브라우저의 최소 타이머 지연으로 인한 블로킹

#### 6.1.3 중복된 Supabase 세션 조회
- **문제**: getUser 함수에서 getSession을 호출하고, refreshToken에서도 getSession 호출
- **증상**: 네트워크 지연 시 두 배의 대기 시간 발생
- **원인**: 불필요한 중복 API 호출

#### 6.1.4 토큰 갱신 스케줄러의 메모리 누수
- **문제**: 컴포넌트 언마운트 시 타이머가 완전히 정리되지 않음
- **증상**: 시간이 지날수록 점점 느려지는 현상
- **원인**: refreshTimer 정리가 제대로 되지 않고, isRefreshing 플래그가 전역적이지 않음

#### 6.1.5 캐시 유효성 검사의 블로킹
- **문제**: 캐시 파싱과 검증이 동기적으로 실행
- **증상**: JSON.parse가 큰 사용자 데이터에서 지연 발생
- **원인**: try-catch 블록 내에서 동기 작업이 많음

### 6.2 개선된 해결 방법

#### 6.2.1 순차적 실행으로 경쟁 조건 해결
```javascript
// Promise.all 대신 순차 실행
const updateAuthData = async () => {
  try {
    // 1. 먼저 토큰 갱신
    const isTokenValid = await refreshToken();
    
    if (!isTokenValid) {
      handleInvalidAuth();
      return;
    }
    
    // 2. 토큰이 유효한 경우에만 사용자 정보 조회
    const userData = await getUser();
    
    if (userData) {
      setCurrentUser(userData);
      setAuthVerified(true);
      // 캐싱
      sessionStorage.setItem('currentUser', JSON.stringify(userData));
      sessionStorage.setItem('lastAuthCheck', Date.now().toString());
    }
  } catch (error) {
    console.error('인증 업데이트 실패:', error);
  }
};
```

#### 6.2.2 마이크로태스크 큐 활용
```javascript
// setTimeout 대신 queueMicrotask 사용
if ('requestIdleCallback' in window) {
  requestIdleCallback(() => updateAuthData());
} else {
  // Promise.resolve()를 사용하여 마이크로태스크로 실행
  Promise.resolve().then(() => updateAuthData());
}
```

#### 6.2.3 Supabase 세션 캐싱
```javascript
// 세션 캐싱을 위한 변수
let cachedSession: any = null;
let sessionCacheTime = 0;
const SESSION_CACHE_DURATION = 60000; // 1분

const getCachedSession = async () => {
  const now = Date.now();
  
  // 캐시가 유효한 경우
  if (cachedSession && (now - sessionCacheTime) < SESSION_CACHE_DURATION) {
    return { data: { session: cachedSession }, error: null };
  }
  
  // 새로 조회
  const result = await supabase.auth.getSession();
  if (result.data.session) {
    cachedSession = result.data.session;
    sessionCacheTime = now;
  }
  
  return result;
};
```

#### 6.2.4 전역 토큰 갱신 관리
```javascript
// 전역 상태로 관리
const tokenRefreshManager = (() => {
  let isRefreshing = false;
  let refreshPromise: Promise<boolean> | null = null;
  
  return {
    refresh: async (refreshFn: () => Promise<boolean>) => {
      if (isRefreshing && refreshPromise) {
        return refreshPromise;
      }
      
      isRefreshing = true;
      refreshPromise = refreshFn().finally(() => {
        isRefreshing = false;
        refreshPromise = null;
      });
      
      return refreshPromise;
    }
  };
})();

// 사용
const performRefresh = async () => {
  return tokenRefreshManager.refresh(refreshToken);
};
```

#### 6.2.5 비동기 캐시 검증
```javascript
// 캐시 검증을 비동기로 처리
const validateCache = async () => {
  return new Promise<CustomUser | null>((resolve) => {
    // Web Worker를 사용하거나 청크 단위로 처리
    const cachedUserStr = sessionStorage.getItem('currentUser');
    if (!cachedUserStr) {
      resolve(null);
      return;
    }
    
    // 작은 청크로 나누어 파싱
    requestAnimationFrame(() => {
      try {
        const user = JSON.parse(cachedUserStr);
        resolve(user);
      } catch (e) {
        resolve(null);
      }
    });
  });
};
```

### 6.3 최종 통합 솔루션

#### 6.3.1 개선된 initAuth 함수
```javascript
useEffect(() => {
  let mounted = true;
  
  const initAuth = async () => {
    try {
      const storeAuth = authHelper.getAuth();
      
      if (!storeAuth) {
        setLoading(false);
        setAuthInitialized(true);
        return;
      }
      
      setAuth(storeAuth);
      
      // 1. 비동기 캐시 검증으로 즉시 UI 표시
      const cachedUser = await validateCache();
      
      if (mounted && cachedUser) {
        setCurrentUser(cachedUser);
        setLoading(false);
        setAuthVerified(true);
      } else if (mounted) {
        setLoading(false);
      }
      
      // 2. 백그라운드 업데이트 (마이크로태스크 사용)
      Promise.resolve().then(async () => {
        if (!mounted) return;
        
        try {
          // 순차적 실행으로 경쟁 조건 방지
          const isTokenValid = await tokenRefreshManager.refresh(refreshToken);
          
          if (!mounted) return;
          
          if (isTokenValid) {
            const userData = await getUser();
            
            if (mounted && userData) {
              setCurrentUser(userData);
              setAuthVerified(true);
              
              // 비동기 캐싱
              requestAnimationFrame(() => {
                sessionStorage.setItem('currentUser', JSON.stringify(userData));
                sessionStorage.setItem('lastAuthCheck', Date.now().toString());
              });
            }
          } else {
            // 토큰 무효 시 처리
            if (mounted) {
              handleInvalidAuth();
            }
          }
        } catch (error) {
          console.error('백그라운드 업데이트 실패:', error);
        }
      });
      
    } catch (error) {
      console.error('초기화 오류:', error);
      if (mounted) {
        setLoading(false);
        handleInvalidAuth();
      }
    } finally {
      if (mounted) {
        setAuthInitialized(true);
      }
    }
  };
  
  initAuth();
  
  // Cleanup 함수
  return () => {
    mounted = false;
  };
}, []);
```

#### 6.3.2 성능 모니터링 및 디버깅
```javascript
// 성능 모니터링을 위한 유틸리티
const performanceMonitor = {
  mark: (name: string) => {
    if (process.env.NODE_ENV === 'development') {
      performance.mark(name);
    }
  },
  
  measure: (name: string, startMark: string, endMark: string) => {
    if (process.env.NODE_ENV === 'development') {
      try {
        performance.measure(name, startMark, endMark);
        const measure = performance.getEntriesByName(name)[0];
        console.log(`[Performance] ${name}: ${measure.duration.toFixed(2)}ms`);
      } catch (e) {
        // 무시
      }
    }
  }
};

// 사용 예시
performanceMonitor.mark('auth-init-start');
await initAuth();
performanceMonitor.mark('auth-init-end');
performanceMonitor.measure('Auth Initialization', 'auth-init-start', 'auth-init-end');
```

### 6.4 즉시 적용 가능한 핫픽스

#### 6.4.1 간단한 디바운싱 적용
```javascript
// AuthProvider 상단에 추가
const debounce = (fn: Function, delay: number) => {
  let timeoutId: NodeJS.Timeout;
  return (...args: any[]) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => fn(...args), delay);
  };
};

// 토큰 체크 함수에 디바운싱 적용
const debouncedTokenCheck = useMemo(
  () => debounce(checkTokenValidity, 1000),
  [checkTokenValidity]
);
```

#### 6.4.2 로딩 상태 즉시 해제
```javascript
// AuthProvider 최상단에 추가
const SKIP_LOADING = true; // 긴급 플래그

// initAuth에서
if (SKIP_LOADING) {
  setLoading(false); // 무조건 즉시 해제
  setAuthInitialized(true);
}
```

이러한 추가 개선사항들을 적용하면 남아있는 홀딩 문제들도 해결될 것으로 예상돼.