# 보장성 슬롯 시스템 연동 가능성 분석 보고서

작성일: 2025-01-13
분석자: Claude Code Assistant

## 1. 개요

본 문서는 보장성 슬롯 설계서와 현재 group-mk 프로젝트의 기존 슬롯 시스템을 비교 분석하여, 
통합 가능성과 충돌 사항을 검토한 결과입니다.

## 2. 현재 시스템 분석 결과

### 2.1 기존 슬롯 시스템 구조

#### 주요 테이블
1. **slots** - 슬롯 기본 정보 관리
   - 상태: pending → approved → success → complete
   - mat_id(총판), product_id(캠페인), user_id 관계 보유
   - quantity, start_date, end_date 기반 관리

2. **slot_works_info** - 일별 작업 기록
   - slot_id, date, work_cnt(작업수) 관리
   - 총판이 일별로 작업 내역 입력

3. **slot_pending_balances** - 대기 잔액 관리
   - 슬롯 생성 시 결제 금액 홀딩

4. **campaigns** - 캠페인(상품) 정보
   - 현재 보장성/일반 구분 없음
   - unit_price 기반 단가 관리

### 2.2 주요 프로세스
- 사용자 구매 → 관리자 승인 → 총판 작업 → 완료 확인 → 정산
- 작업수 기반 부분 정산 지원
- 환불 프로세스 구현됨

## 3. 보장성 슬롯 설계서와의 차이점

### 3.1 핵심 차이점
1. **가격 협상 시스템**
   - 현재: 고정 단가(unit_price)
   - 보장성: 사용자-총판 간 협상 기반 가격 결정

2. **작업 완료 기준**
   - 현재: 작업수(work_cnt) 기반
   - 보장성: 순위 달성 횟수 기반

3. **정산 방식**
   - 현재: 전체 완료 후 일괄 정산
   - 보장성: 목표 달성 시마다 회차별 정산

4. **홀딩 시스템**
   - 현재: 단순 대기 잔액
   - 보장성: 사용자/총판 홀딩 분리 관리

## 4. 통합 방안

### 4.1 접근 방법 1: 기존 시스템 확장 (권장)

#### 장점
- 코드 재사용성 높음
- 기존 UI/UX 활용 가능
- 개발 기간 단축

#### 필요한 수정사항
1. **campaigns 테이블 확장**
   ```sql
   ALTER TABLE campaigns 
   ADD COLUMN slot_type VARCHAR(20) DEFAULT 'standard',
   ADD COLUMN is_negotiable BOOLEAN DEFAULT FALSE,
   ADD COLUMN guarantee_config JSONB;
   ```

2. **slots 테이블 확장**
   ```sql
   ALTER TABLE slots
   ADD COLUMN slot_type VARCHAR(20) DEFAULT 'standard',
   ADD COLUMN target_rank INTEGER,
   ADD COLUMN guarantee_count INTEGER,
   ADD COLUMN completed_count INTEGER DEFAULT 0,
   ADD COLUMN negotiated_price NUMERIC(10,2);
   ```

3. **신규 테이블 추가**
   - guarantee_slot_negotiations (협상 이력)
   - guarantee_slot_settlements (회차별 정산)

### 4.2 접근 방법 2: 별도 시스템 구축

#### 장점
- 완전히 독립적인 운영
- 복잡도 분리

#### 단점
- 중복 코드 발생
- 유지보수 포인트 증가
- 사용자 경험 분절

## 5. 충돌 사항 및 해결 방안

### 5.1 테이블 충돌
- **충돌 없음**: 보장성 슬롯 설계서의 모든 테이블이 신규 테이블

### 5.2 비즈니스 로직 충돌
1. **상태 관리**
   - 현재: pending → approved → success → complete
   - 보장성: 협상 단계 추가 필요
   - 해결: 상태 확장 또는 별도 상태 필드 추가

2. **정산 프로세스**
   - 현재: 전체 완료 후 정산
   - 보장성: 부분 정산 필요
   - 해결: 기존 부분 정산 로직 활용 및 확장

### 5.3 UI/UX 충돌
- 캠페인 목록에서 보장성/일반 구분 표시 필요
- 슬롯 등록 모달 분기 처리 필요
- 총판 대시보드에 순위 확인 기능 추가 필요

## 6. 구현 난이도 및 예상 일정

### 6.1 구현 난이도: 중상

#### 복잡도 요인
1. 협상 시스템 (실시간 메시징)
2. 순위 확인 및 검증 로직
3. 복잡한 홀딩/정산 시스템
4. 기존 시스템과의 통합

### 6.2 예상 개발 일정 (Claude와 협업 시)

#### Phase 1: 기초 구조 (3-4일)
- 데이터베이스 스키마 구축
- 기본 API 엔드포인트 개발
- 서비스 레이어 구현

#### Phase 2: 협상 시스템 (4-5일)
- 견적 요청/응답 UI
- 실시간 협상 메시지
- 가격 제안 로직

#### Phase 3: 핵심 비즈니스 로직 (5-6일)
- 보장성 슬롯 구매 프로세스
- 순위 확인 시스템
- 홀딩 관리 시스템

#### Phase 4: 정산 시스템 (3-4일)
- 회차별 정산 로직
- 자동 정산 처리
- 정산 내역 관리

#### Phase 5: UI/UX 구현 (4-5일)
- 사용자 화면 (견적, 구매, 관리)
- 총판 화면 (확인, 정산)
- 관리자 화면

#### Phase 6: 테스트 및 안정화 (3-4일)
- 통합 테스트
- 버그 수정
- 성능 최적화

**총 예상 기간: 22-28일 (약 4-5주)**

### 6.3 리스크 요인
1. **실시간 기능**: Supabase Realtime 설정 복잡도
2. **트랜잭션 처리**: 복잡한 정산 로직의 원자성 보장
3. **기존 시스템 영향**: 통합 시 사이드 이펙트 가능성

## 7. 권장 구현 전략

### 7.1 단계별 접근
1. **MVP 먼저 구현**: 협상 없는 고정가 보장성 슬롯
2. **점진적 기능 추가**: 협상 → 부분 정산 → 자동화

### 7.2 기술 스택
- **Frontend**: 기존 React + TypeScript 활용
- **Backend**: Supabase (Database, Auth, Realtime, Edge Functions)
- **상태관리**: 기존 패턴 유지

### 7.3 우선순위
1. 데이터베이스 스키마 및 기본 CRUD
2. 보장성 슬롯 구매 플로우
3. 총판 순위 확인 시스템
4. 협상 시스템
5. 자동 정산

## 8. 결론

보장성 슬롯 시스템은 현재 group-mk 프로젝트에 통합 가능합니다. 
기존 슬롯 시스템을 확장하는 방식이 가장 효율적이며, 
주요 충돌 사항 없이 구현 가능합니다.

Claude와의 협업을 통해 약 4-5주 내에 전체 시스템 구현이 가능할 것으로 예상되며,
단계별 접근을 통해 리스크를 최소화하면서 안정적인 구현이 가능합니다.

### 추가 권장사항
1. 기존 슬롯 시스템 리팩토링을 병행하여 확장성 개선
2. 테스트 코드 작성으로 안정성 확보
3. 단계별 배포로 사용자 피드백 반영

---
분석 완료: 2025-01-13